
  ______      __    __   __    ______  __  ___ .___  ___.      ___   .___________.  ______  __    __  
 /  __  \    |  |  |  | |  |  /      ||  |/  / |   \/   |     /   \  |           | /      ||  |  |  | 
|  |  |  |   |  |  |  | |  | |  ,----'|  '  /  |  \  /  |    /  ^  \ `---|  |----`|  ,----'|  |__|  | 
|  |  |  |   |  |  |  | |  | |  |     |    <   |  |\/|  |   /  /_\  \    |  |     |  |     |   __   | 
|  `--'  '--.|  `--'  | |  | |  `----.|  .  \  |  |  |  |  /  _____  \   |  |     |  `----.|  |  |  | 
 \_____\_____\\______/  |__|  \______||__|\__\ |__|  |__| /__/     \__\  |__|      \______||__|  |__| 


QuickMactch: A Heuristic Algorithm for Compute Edge 
                Colorings on Regular Bipartite Multigraphs

                         By: Andrew Hannigan '13


Getting Started:
1) cd into c/
2) run "make test"
3) run "./test.out"
4) Select either 2 and 5 to see the QuickMatch algorithm in action



graph.c:	Contains all data-structures and helper methods for graphs.

quickmatch.c:	Implements QuickMatch algorithm

alternating.c:	Implements all six methods of finding augmenting paths

cycles.c:	Implements Euler splits

color.c:	Combines all code to find an edge coloring of a regular bipartite graph 

testing.c:	All testing code

main.c:		UI for running test code	


Used to create exacutable tests that are run by bash scripts in the "scripts" directory
-alttest.c	
-dtest.c
-ntest.c



Python code is for creating plots of data for QuickMatch analysis





